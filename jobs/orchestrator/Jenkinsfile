@Library('SnykShared@master')
import com.symphony.security.containers.Artifactory

properties([
   parameters([
     stringParam(name: 'snyk_org', defaultValue: '', description: "Snyk Org Id (not name), should have a token valid"),
     stringParam(name: 'snyk_token', defaultValue: '', description: "Token")
   ])    
 ])    


node {
    stage('Build Executor Container') {
        def image_name = 'snyk-release'
        def image_remote = 'slex-reg-test/snyk-release:' + params.snyk_org
        echo 'going to build ...'
        sh 'pwd'
        sh 'ls -al'

        withCredentials([usernamePassword(credentialsId: 'SNYK_BASEIMAGE_TOKEN', usernameVariable: 'FILLER', passwordVariable: 'master')]) { 
            echo 'XXXX 1'
            sh "printf \"%s\" \"${master}\" > master.txt"
            echo 'XXXX 2'
            sh "printf \"%s\" \"${params.snyk_token}\" > token.txt"
            echo 'XXXX 2.2'
        }
        echo 'XXXX 3'
        sh "DOCKER_BUILDKIT=1 docker build -f docker/Dockerfile --no-cache --secret id=master,src=master.txt --secret id=org_token_plain,src=token.txt  -t snyk-release docker/"
        sh 'rm master.txt; rm token.txt'
        
        echo 'going to tag & push ...'
        def art = new Artifactory(this)
        art.push(image_name, image_remote)
        echo 'IMAGE DONE'
    }

    stage('Release scan orchestrator') {
        def projects = [:]
        def snyk_org = "1533ded9-dcfa-4e40-ba01-3e05f03b60e0"
        def snyk_scan = "monitor"

        projects['SFE-Client-App'] = {
            build job: 'executor', parameters: [
                string(name: 'snyk_org', value: snyk_org),
                string(name: 'git_repo', value: "github.com/SymphonyOSF/SFE-Client-App.git"),
                string(name: 'git_hash', value: "20.12"),
                string(name: 'prj_type', value: 'nodejs'),
                string(name: 'snyk_scan', value: snyk_scan)
            ],
            wait: true
        }

        // projects['SBE'] = {
        //     build job: 'executor', parameters: [
        //         string(name: 'snyk_org', value: snyk_org),
        //         string(name: 'git_repo', value: "github.com/SymphonyOSF/SBE.git"),
        //         string(name: 'git_hash', value: "20.12"),
        //         string(name: 'prj_type', value: "java"),
        //         string(name: 'java_version', value: '8'),
        //         string(name: 'java_params', value: "-DsymphonySkipUnitTests=true -DsymphonySkipIntegrationTests=true -PSymphony,SharedResources"),
        //         string(name: 'snyk_scan', value: snyk_scan)
        //     ],
        //     wait: true
        // }

        projects['rtc-conference-service'] = {
            build job: 'executor', parameters: [
                string(name: 'snyk_org', value: snyk_org),
                string(name: 'git_repo', value: "github.com/SymphonyOSF/rtc-conference-service.git"),
                string(name: 'git_hash', value: "rc-current-r20.12"),
                string(name: 'prj_type', value: "java"),
                string(name: 'java_version', value: '11'),
                string(name: 'java_params', value: "-Dskip.tests=true -Dskip.integration.tests=true"),
                string(name: 'snyk_exclude', value: "tools"),
                string(name: 'snyk_scan', value: snyk_scan)
            ],
            wait: true
        }

        parallel projects
    }
}
